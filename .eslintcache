[{"/Users/khong/Teahouse/projects/character-creator-1/src/index.tsx":"1","/Users/khong/Teahouse/projects/character-creator-1/src/App.tsx":"2","/Users/khong/Teahouse/projects/character-creator-1/src/components/Layout.tsx":"3","/Users/khong/Teahouse/projects/character-creator-1/src/views/Home.tsx":"4","/Users/khong/Teahouse/projects/character-creator-1/src/features/TreeOfLife/TreeOfLife.tsx":"5","/Users/khong/Teahouse/projects/character-creator-1/src/features/TreeOfLife/data-reader.tsx":"6"},{"size":496,"mtime":1609960700319,"results":"7","hashOfConfig":"8"},{"size":1250,"mtime":1609961393828,"results":"9","hashOfConfig":"8"},{"size":1189,"mtime":1609961192209,"results":"10","hashOfConfig":"8"},{"size":987,"mtime":1609970970532,"results":"11","hashOfConfig":"8"},{"size":4068,"mtime":1610031178926,"results":"12","hashOfConfig":"8"},{"size":3726,"mtime":1610031293972,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"da6633",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/khong/Teahouse/projects/character-creator-1/src/index.tsx",[],["28","29"],"/Users/khong/Teahouse/projects/character-creator-1/src/App.tsx",[],"/Users/khong/Teahouse/projects/character-creator-1/src/components/Layout.tsx",[],"/Users/khong/Teahouse/projects/character-creator-1/src/views/Home.tsx",[],"/Users/khong/Teahouse/projects/character-creator-1/src/features/TreeOfLife/TreeOfLife.tsx",["30"],"///////////////////////////////////////////////////////////////////////////////////////////////\n////////////////                                                                          NOTES\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n////////////////                                                                        IMPORTS\n\nimport React, { useState } from \"react\";\n\nimport rawAnimalData from \"../../data/creaturekind/animals.json\";\nimport { validAnimalData, getRandomFromList } from \"./data-reader\";\n\nimport { List, ListCategory } from \"../../data/types\";\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n/////////////                                                                             SETUP\ntype TreeOfLifeSettingsProps = {};\ntype TreeOfLifeSettingsState = {\n  keysForExcludingWholeBranch: string[],\n  keysForExcludingMembers: string[],\n  specificMembersExcluded: string[],\n  list: List\n};\n\ntype TreeNodeProps = {\n  animalCategory: ListCategory;\n  thisNodeKey: string;\n  parentNodeKeys: string[];\n};\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n/////////////                                                                COMPONENTS & LOGIC\n\nclass TreeOfLifeSettings extends React.Component<TreeOfLifeSettingsProps, TreeOfLifeSettingsState> {\n  state: TreeOfLifeSettingsState = {\n    keysForExcludingWholeBranch: [],\n    keysForExcludingMembers: [],\n    specificMembersExcluded: [],\n    list: rawAnimalData as List\n  }\n\n  // computeList() {}\n\n  render() {\n    console.log(this.state.list)\n    console.log(validAnimalData)\n    return (\n      <div>\n        <TreeOfLifeDisplay />\n      </div>\n    )\n  }\n}\n\nconst TreeOfLifeDisplay = () => {\n  const animalDataAsList = rawAnimalData as List;\n  const validAnimalGroupKeys = Object.keys(animalDataAsList).filter((animalGroupName) => animalDataAsList[animalGroupName].groupName !== undefined);\n\n  // console.log(validAnimalGroupKeys.map(key => animalDataAsList[key]));\n\n  return (\n    <div>\n      {\n        validAnimalGroupKeys.map((key: string, index: number) => {\n          return (\n            <div key={index}>\n              {/* i'm a base group */}\n              <TreeNode \n                animalCategory={animalDataAsList[key]}\n                thisNodeKey={key}\n                parentNodeKeys={[]}\n              />\n            </div>\n          )\n        })\n      }\n    </div>\n  );\n}\n\n// recursive\nconst TreeNode: React.FC<TreeNodeProps> = ({animalCategory, thisNodeKey, parentNodeKeys}) => {\n  // console.log(`my name is ${thisNodeKey}. my parentNodeKeys are:`)\n  // console.log(parentNodeKeys)\n  // console.log()\n  // console.log(animalCategory)\n\n  const [visible, setVisible] = useState<boolean>(true);\n  const toggleVisibility = () => {visible ? setVisible(false) : setVisible(true)};\n\n  const groupName = animalCategory.groupName || \"\";\n  const subcategoriesObj = animalCategory.subcategories;\n  const specificMembers = animalCategory.specific;\n\n  return (\n    <div style={{\"marginLeft\": \"16px\"}}>\n      <p> groupName: {groupName} </p>\n\n      <button onClick={toggleVisibility}>\n        toggle children visibility\n      </button>\n\n      <div\n        style={{\n          \"width\": \"50%\",\n          \"maxHeight\": \"120px\",\n          \"overflowY\": \"scroll\"\n        }}\n      >\n        {\n          specificMembers ? specificMembers.map((specificMember: string, index: number) => (\n            <p key={index}>\n              {specificMember}\n            </p>\n          )) : <></>\n        }\n      </div>\n        {\n          subcategoriesObj ? Object.keys(subcategoriesObj).map((subcategoryKey: string, index: number) => (\n            <TreeNode \n              key={index}\n              animalCategory={subcategoriesObj[subcategoryKey]}\n              thisNodeKey={subcategoryKey}\n              parentNodeKeys={[...parentNodeKeys, thisNodeKey]}\n            />\n          ))\n          : <></>\n        }\n      \n    </div>\n  )\n}\n\nexport default TreeOfLifeSettings;","/Users/khong/Teahouse/projects/character-creator-1/src/features/TreeOfLife/data-reader.tsx",["31"],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":10,"column":27,"nodeType":"38","messageId":"39","endLine":10,"endColumn":44},{"ruleId":"36","severity":1,"message":"40","line":79,"column":7,"nodeType":"38","messageId":"39","endLine":79,"endColumn":35},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"@typescript-eslint/no-unused-vars","'getRandomFromList' is defined but never used.","Identifier","unusedVar","'checkThatReducedListIsUnique' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]